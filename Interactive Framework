# -----------------------------
# Entra ID Interactive Framework
# Author: Shaked Weissman
# -----------------------------
function EntraCollection {

<#####################################>
function Invoke-FindGroup {
    param (
        [string]$GraphAccessToken,
        [string]$Word
    )

    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"

    function Invoke-WithRetry {
        param (
            [string]$Method,
            [string]$Uri,
            [hashtable]$Headers,
            [int]$MaxRetries = 5
        )

        $attempt = 0
        while ($true) {
            try {
                return Invoke-RestMethod -Method $Method -Uri $Uri -Headers $Headers -ErrorAction Stop
            }
            catch {
                if ($.Exception.Response.StatusCode.value_ -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 10 }
                    Write-Host "[!] 429. Waiting $retryAfter seconds..." -ForegroundColor Yellow
                    Start-Sleep -Seconds $retryAfter
                    $attempt++
                    if ($attempt -ge $MaxRetries) {
                        Write-Host "[X] Max retries. Skipping." -ForegroundColor Red
                        return $null
                    }
                } else {
                    throw $_
                }
            }
        }
    }

    $headers = @{ 
        Authorization = "Bearer $GraphAccessToken" 
        'User-Agent' = $UserAgent
        }


    $groups = Invoke-WithRetry -Method GET -Uri "https://graph.microsoft.com/v1.0/groups?$select=id,displayName,isAssignableToRole" -Headers $headers
    if ($groups -eq $null) { return }


    if ($Word) {
        $filteredGroups = $groups.value | Where-Object { $_.displayName.ToLower() -like "*$($Word.ToLower())*" }
        Write-Host "[>] Filter applied: "$Word". Matching groups: $($filteredGroups.Count)"
    } else {
        $filteredGroups = $groups.value
        Write-Host "[>] No filter provided. Total groups: $($filteredGroups.Count)"
    }   


    $directoryRoles = Invoke-WithRetry -Method GET -Uri "https://graph.microsoft.com/v1.0/directoryRoles" -Headers $headers
    if ($directoryRoles -eq $null) { return }

    $groupToRolesMap = @{}

    foreach ($role in $directoryRoles.value) {
        $roleId = $role.id
        $roleName = $role.displayName

        $members = Invoke-WithRetry -Method GET -Uri "https://graph.microsoft.com/v1.0/directoryRoles/$roleId/members" -Headers $headers
        if ($members -eq $null) { continue }

        $groupMembers = $members.value | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.group' }
        foreach ($member in $groupMembers) {
            $groupToRolesMap[$member.id] += $roleName
        }
    }

    Write-Host "`n[+] Starting to enumeate filtered groups in $TenantName Tenant"

        foreach ($group in $filteredGroups) {
            $groupId = $group.id
            $groupName = $group.displayName
            $roleAssignable = $group.isAssignableToRole

            Write-Host "Group: $groupName ($groupId)"
            Write-Host "  ↳ Role-Assignable: $roleAssignable"

            if ($groupToRolesMap.ContainsKey($groupId)) {
                foreach ($role in $groupToRolesMap[$groupId]) {
                    Write-Host "  ↳ Assigned to Entra Role: $role"
                }
            }

            Write-Host""
        }
}


<#################################################################################################################################################>
function Invoke-FindUserByWord {
    param(
        [string]$RefreshToken,
	    [string]$TenantID,
	    [string]$TenantName,
	    [string]$GraphAccessToken,
	    [string]$ClientID,
	    [string]$ClientSecret,
	    [string]$Word
    )

	$OutputFile = "FoundUsers.txt"
	if (Test-Path $OutputFile) { Remove-Item $OutputFile -Force }


    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
    $headers = @{ 'User-Agent' = $UserAgent }


    function Get-TokenWithRefreshToken {
        param ( 
            [string]$TenantID,
            [string]$RefreshToken
        )
        
        $url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token" 
        $body = @{
            client_id     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            scope         = "https://graph.microsoft.com/.default"
            grant_type    = "refresh_token"
            refresh_token = $RefreshToken
        }

        try {
            $response = Invoke-RestMethod -Method Post -Uri $url -Body $body -Headers $headers -ContentType "application/x-www-form-urlencoded"
            return $response.access_token
        } catch {
            Write-Host "[-] Failed to get access token: $_" -ForegroundColor Red
            exit 1
        }
    }

	function Get-TokenWithClientSecret {
        param(
            [string]$ClientID,
            [string]$ClientSecret,
            [string]$TenantID   
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
		$body = @{
			"client_id"     = $ClientId
			"client_secret" = $ClientSecret
			"scope"         = "https://graph.microsoft.com/.default"
			"grant_type"    = "client_credentials"
			}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
	}


	if (-not $GraphAccessToken) { return }

    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null){
        $authMethod = "client"
    }
    
    if( $RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null){
        $authMethod = "refresh"
    }
    

    $StartTime = Get-Date
    $UsersUrl = "https://graph.microsoft.com/v1.0/users"
    $ListUsers = @()

    $Headers = @{
        "Authorization" = "Bearer $GraphAccessToken"
        "Content-Type"  = "application/json"
        "User-Agent"    ="$UserAgent"
    }

    write-host "Starting to eumerate all user that contain '$word' in $TenantName Tenant.."

    while ($UsersUrl) {
        
        if ((Get-Date) -gt $StartTime.AddMinutes(7)) {
            Write-Host "[*] Refreshing Access Token..." -ForegroundColor Yellow
            if ($authMethod -eq "client") {
                $GraphAccessToken = Get-TokenWithClientSecret -ClientID $ClientID -ClientSecret $ClientSecret -TenantID $TenantID
            }
            if ($authMethod -eq "refresh") {
                $GraphAccessToken = Get-TokenWithRefreshToken -RefreshToken $RefreshToken -TenantID $TenantID
            }
            $StartTime = Get-Date
            $headers = @{
                "Authorization" = "Bearer $GraphAccessToken"
                "Content-Type"  = "application/json"
                "User-Agent"    = "$UserAgent"
            }
        }

        try {
            $Response = Invoke-RestMethod -Method Get -Uri $UsersUrl -Headers $Headers -ErrorAction Stop
            foreach ($User in $Response.value) {
                if ( ($User.displayName -like "*$Word*" -or $User.mail -like "*$Word*" -or $User.userPrincipalName -like "*$Word*" -or $User.givenName -like "*$Word*" -or $User.surname -like "*$Word*")) 
                {
					$ListUsers += $User
                    $Line = "$($User.displayName) | $($User.userPrincipalName)"
                    Add-Content -Path $OutputFile -Value $Line
                    Write-Host ""
                    Write-Host "[+] Found: " -NoNewline
                    Write-Host "$($User.displayName)" -ForegroundColor Green -NoNewline
                    Write-Host " | $($User.userPrincipalName)" -ForegroundColor DarkGray
                }
            }

            $UsersUrl = $Response.'@odata.nextLink'
        } catch {
            if ($_.Exception.Response.StatusCode.value__ -eq 429) {
                $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                if ($retryAfter) {
                    Write-Host "[!] Rate limit hit. Retrying after $retryAfter seconds..." -ForegroundColor Yellow
                    Start-Sleep -Seconds ([int]$retryAfter)
                } else {
                    Write-Host "[!] Rate limit hit. Retrying after default 60 seconds..." -ForegroundColor Yellow
                    Start-Sleep -Seconds 60
                }
            } else {
                Write-Warning "Failed to retrieve users: $_"
                break
            }
        }
    }

    return $ListUsers
    $ListUsers |  Out-File -FilePath "ListUsers.txt" -Encoding UTF8
    Write-Host "Exported to ListUsers.txt" -ForegroundColor Green
}


<#################################################################################################################################################>
function Invoke-FindUserRole {

    param(
        [string]$RefreshToken,
        [string]$ClientID,
        [string]$GraphAccessToken,
        [string]$ClientSecret,
        [string]$TenantName,
        [string]$TenantID
    )

    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
    $headers = @{ 'User-Agent' = $UserAgent }


    function Get-TokenWithRefreshToken {
        param ( 
            [string]$TenantID,
            [string]$RefreshToken
        )
        
        $url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token" 
        $body = @{
            client_id     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            scope         = "https://graph.microsoft.com/.default"
            grant_type    = "refresh_token"
            refresh_token = $RefreshToken
        }

        try {
            $response = Invoke-RestMethod -Method Post -Uri $url -Body $body -Headers $headers -ContentType "application/x-www-form-urlencoded"
            return $response.access_token
        } catch {
            Write-Host "[-] Failed to get access token: $_" -ForegroundColor Red
            exit 1
        }
    }

	function Get-TokenWithClientSecret {
        param(
            [string]$ClientID,
            [string]$ClientSecret,
            [string]$TenantID   
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
		$body = @{
			"client_id"     = $ClientId
			"client_secret" = $ClientSecret
			"scope"         = "https://graph.microsoft.com/.default"
			"grant_type"    = "client_credentials"
			}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
	}


	if (-not $GraphAccessToken) { return }

    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null){
        $authMethod = "client"
    }
    
    if( $RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null){
        $authMethod = "refresh"
    }

    $StartTime = Get-Date
    $headers = @{
        Authorization = "Bearer $GraphAccessToken"
        "Content-Type" = "application/json"
        "User-Aget"    = "$UserAgent"
    }

    $allUsers = @()
    $uri = "https://graph.microsoft.com/v1.0/users"

    Write-Host "[*] Starting yto enumerate all users in $TenantName Tenant" -ForegroundColor Cyan

    while ($uri) {
        try {
            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
            $allUsers += $response.value
            $uri = $response.'@odata.nextLink'
        } catch {
            if ($_.Exception.Response.StatusCode.value__ -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 10 }
                    Write-Host "[!] 429 Too Many Requests. Retrying in $retryAfter seconds..." -ForegroundColor DarkYellow
                    Start-Sleep -Seconds $retryAfter
            }
            if ((Get-Date) -gt $StartTime.AddMinutes(7)) {
                Write-Host "[*] Refreshing Access Token..." -ForegroundColor Yellow
                if ($authMethod -eq "client") {
                    $GraphAccessToken = Get-TokenWithClientSecret -ClientID $ClientID -ClientSecret $ClientSecret -TenantID $TenantID
                }
                if ($authMethod -eq "refresh") {
                    $GraphAccessToken = Get-TokenWithRefreshToken -RefreshToken $RefreshToken -TenantID $TenantID
                }
                
                $StartTime = Get-Date
                $headers = @{
                    "Authorization" = "Bearer $GraphAccessToken"
                    "Content-Type"  = "application/json"
                    "User-Agent"    = "$UserAgent"
                }
            }
            
        }
    }
	Write-Host "[*] Total users found: $($allUsers.Count)" -ForegroundColor Cyan

	$usersWithRoles = @()
    foreach ($user in $allUsers) {
        $id = $user.id
        $upn = $user.userPrincipalName
        Write-Host "`n[*] Checking roles for: $upn ($id)" -ForegroundColor Cyan

        $roleUri = "https://graph.microsoft.com/v1.0/users/$id/transitiveMemberOf/microsoft.graph.directoryRole"

        while ($true) {
            try {
                $roleResponse = Invoke-RestMethod -Uri $roleUri -Headers $headers -Method Get
                $roles = $roleResponse.value
                if ($roles.Count -eq 0) {
                    break
                }
                Write-Host "[+] $upn ($id) has the following roles:" -ForegroundColor Green
                $roleNames = @()
                foreach ($role in $roles) {
                    $roleNames += $role.displayName
                    Write-Host "    -> $($role.displayName)" -ForegroundColor Yellow
                }
                    
                $usersWithRoles += [PSCustomObject]@{
                    UPN       = $upn
                    ObjectId  = $id
                    Roles     = ($roleNames -join ", ")
                }
                    break
            } catch {
                if ($_.Exception.Response.StatusCode.value__ -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 10 }
                    Write-Host "[!] 429 Too Many Requests. Retrying in $retryAfter seconds..." -ForegroundColor DarkYellow
                    Start-Sleep -Seconds $retryAfter
                } else {
                    Write-Host "[-] Failed to fetch roles for $upn ($id): $_" -ForegroundColor Red
                    break
                }
            }
        }
    }

    if ($usersWithRoles.Count -gt 0) {
        Write-Host "`n==========================" -ForegroundColor Cyan
        Write-Host "Users with Roles Found:" -ForegroundColor Cyan
        Write-Host "==========================" -ForegroundColor Cyan
        foreach ($user in $usersWithRoles) {
            Write-Host "`nUPN: $($user.UPN)" -ForegroundColor Green
            Write-Host "ObjectId: $($user.ObjectId)" -ForegroundColor DarkCyan
            Write-Host "Roles: $($user.Roles)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "`n[!] No users with roles found." -ForegroundColor DarkGray
    }

     $usersWithRoles |  Out-File -FilePath "usersWithRoles.txt" -Encoding UTF8
     Write-Host "Exported to usersWithRoles.txt" -ForegroundColor Green
}



<#################################################################################################################################################>
function Invoke-FindServicePrincipal {
    param (
        [string]$RefreshToken,
        [string]$GraphAccessToken,
        [string]$TenantName,
        [string]$ClientID,
        [string]$ClientSecret,
	    [string]$TenantID
    )

    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
    $headers = @{ 'User-Agent' = $UserAgent }

    function Get-TokenWithRefreshToken {
        param ( 
            [string]$TenantID
        )
        
        $url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token" 
        $body = @{
            client_id     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            scope         = "https://graph.microsoft.com/.default"
            grant_type    = "refresh_token"
            refresh_token = $RefreshToken
        }

        try {
            $response = Invoke-RestMethod -Method Post -Uri $url -Body $body -Headers $headers -ContentType "application/x-www-form-urlencoded"
            return $response.access_token
        } catch {
            Write-Host "[-] Failed to get access token: $_" -ForegroundColor Red
            exit 1
        }
    }

	function Get-TokenWithClientSecret {
        param(
            [string]$ClientID,
            [string]$ClientSecret,
            [string]$TenantID   
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
		$body = @{
			"client_id"     = $ClientId
			"client_secret" = $ClientSecret
			"scope"         = "https://graph.microsoft.com/.default"
			"grant_type"    = "client_credentials"
			}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
	}


	if (-not $GraphAccessToken) { return }

    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null){
        $authMethod = "client"
    }
    
    if( $RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null){
        $authMethod = "refresh"
    }

    $StartTime = Get-Date
    $headers = @{
        "Authorization" = "Bearer $GraphAccessToken"
        "Content-Type"  = "application/json"
        "User-Aagent"    = "$UserAgent"
    }

    $allServicePrincipalIds = @()
    $uri = "https://graph.microsoft.com/v1.0/servicePrincipals"
     Write-Host "[*] Satring to enumerate all Service Principal in $TenantName Tenant" -ForegroundColor Cyan

    do {
        try {
            $response = Invoke-RestMethod -Method GET -Uri $uri -Headers $headers -ErrorAction Stop
            $allServicePrincipalIds += $response.value | ForEach-Object { $_.id }
            $uri = $response.'@odata.nextLink'
        } catch {
				if ($_.Exception.Response.StatusCode.value__ -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 10 }
                    Write-Host "[-] 429 received. Waiting $retryAfter seconds..." -ForegroundColor DarkYellow
                    Start-Sleep -Seconds $retryAfter
				}
				else{
					Write-Host "[-] Failed to Service Principals" -ForegroundColor Red
					break
				}
			}
    } while ($uri)
        Write-Host "[+] Retrieved $($allServicePrincipalIds.Count) Service Principal IDs." -ForegroundColor Green
        $output = @()
        foreach ($id in $allServicePrincipalIds) {

        if ((Get-Date) -gt $StartTime.AddMinutes(7)) {
            Write-Host "[*] Refreshing Access Token..." -ForegroundColor Yellow
                if ($authMethod -eq "client") {
                    $GraphAccessToke = Get-TokenWithClientSecret -ClientID $ClientID -ClientSecret $ClientSecret -TenantID $TenantID
                }
                if ($authMethod -eq "refresh") {
                    $GraphAccessToken = Get-TokenWithRefreshToken -RefreshToken $RefreshToken -TenantID $TenantID
                }
                
                $StartTime = Get-Date
                $headers = @{
                    "Authorization" = "Bearer $GraphAccessToken"
                    "Content-Type"  = "application/json"
                    "User-Agent"    = "$UserAgent"
                }
            }

        $spUri = "https://graph.microsoft.com/v1.0/servicePrincipals/$id"
        $grantsUri = "https://graph.microsoft.com/v1.0/servicePrincipals/$id/oauth2PermissionGrants"

        $response = $null
        $grants = $null

        while ($true) {
            try {
                $response = Invoke-RestMethod -Uri $spUri -Headers $headers -Method GET -ErrorAction Stop
                $grants = Invoke-RestMethod -Uri $grantsUri -Headers $headers -Method GET -ErrorAction SilentlyContinue
                break
            } catch {
                if ($_.Exception.Response.StatusCode.value__ -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 10 }
                    Write-Host "[-] 429 received. Waiting $retryAfter seconds..." -ForegroundColor DarkYellow
                    Start-Sleep -Seconds $retryAfter
                } else {
                    Write-Host "[-] Failed to fetch SP $id" -ForegroundColor Red
                    break
                }
            }
        }

        if ($response) {
            $clientId = $response.appId
            $displayName = $response.displayName
            $scopes = $response.oauth2PermissionScopes
            $ReplyUrls = $response.replyUrls
            $delegatedScopes = $scopes | Where-Object { $_.type -eq "User" }

            $hasNoSecret = -not $response.passwordCredentials -or $response.passwordCredentials.Count -eq 0
            $hasDelegatedScopes = $delegatedScopes.Count -gt 0
            $hasAdminConsent = $false
            if ($grants.value | Where-Object { $_.consentType -eq "AllPrincipals" }) {
                $hasAdminConsent = $true
            }

            if ($hasDelegatedScopes -and $hasNoSecret -and -not $hasAdminConsent) {
                foreach ($scope in $delegatedScopes) {
                    $line1 = "[+] $displayName | client_id: $clientId | scope: $($scope.value) | consent: $($scope.adminConsentDescription)"
                    Write-Host $line1 -ForegroundColor Green
                    Write-Host "[Reply URLs]:" -ForegroundColor DarkCyan
                    foreach ($url in $response.replyUrls) {
                        Write-Host "  - $url" -ForegroundColor DarkGreen
                    }
                    Write-Host "================="
                    $output += $line1
                    $output += $response.replyUrls | ForEach-Object { "  - $_" }
                    $output += "================="
                }
            } else {
                $line = "[-] $displayName | client_id: $clientId | Skipped (admin consent granted or not eligible)"
                Write-Host $line -ForegroundColor DarkGray
            }
        }
    }
    $output | Out-File -FilePath "ServicePrincipals.txt" -Encoding UTF8
    Write-Host "Exported to ServicePrincipals.txt" -ForegroundColor Green
}

<#################################################################################################################################################>
function Invoke-FindPublicGroups {

    param (
        [string]$RefreshToken, 
        [string]$ClientID, 
        [string]$GraphAccessToken, 
        [string]$TenantID,
        [string]$TenantName,
        [string]$ClientSecret,
        [switch]$Deep		
    )


    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
    $headers = @{ 'User-Agent' = $UserAgent }
	
	
    function Get-Token-WithRefreshToken {
        param( 
            [string]$RefreshToken, 
            [string]$TenantID 
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
	    $body = @{
            "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            "scope"         = "https://graph.microsoft.com/.default"
            "grant_type"    = "refresh_token"
            "refresh_token" = $RefreshToken
		}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
	}

	function Get-Token-WithClientSecret {
        param(
            [string]$ClientID,
            [string]$ClientSecret,
            [string]$TenantID   
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
		$body = @{
			"client_id"     = $ClientId
			"client_secret" = $ClientSecret
			"scope"         = "https://graph.microsoft.com/.default"
			"grant_type"    = "client_credentials"
			}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
		}


	if (-not $GraphAccessToken) { return }

    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null){
        $authMethod = "client"
    }
    
    if( $RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null){
        $authMethod = "refresh"
    }

    if (Test-Path "Public_Groups.txt") {
        $choice = Read-Host "Public_Groups.txt exists. (D)elete / (A)ppend?"
        if ($choice -match "^[dD]$") {
            Remove-Item -Path "Public_Groups.txt" -Force
        } elseif ($choice -notmatch "^[aA]$") {
            return
        }
    }

    function Invoke-With-Retry {
        param (
            [string]$Url
        )
        $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
        $headers = @{ 
            'User-Agent' = $UserAgent
            'Authorization' = "Bearer $GraphAccessToken"
            }
        $success = $false
        $response = $null
            do {
                try {
                    $response = Invoke-RestMethod -Uri $Url -Headers $headers -ErrorAction Stop
                    $success = $true
                } catch {
                    $statusCode = $_.Exception.Response.StatusCode.value__
                    if ($statusCode -eq 429) {
                        $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                        if (-not $retryAfter) { $retryAfter = 7 }
                        Write-Host "[!] Rate limit hit ($Url). Sleeping $retryAfter seconds..." -ForegroundColor Yellow
                        Start-Sleep -Seconds ([int]$retryAfter)
                    } else {
                        Write-Host "[-] Error in request to $Url" -ForegroundColor DarkGray
                        return $null
                    }
                }
            } while (-not $success)
            return $response
        }

	
    function Get-SensitiveConversations {
        param (
            [string]$GroupId,
            [string]$GroupName,
            [string]$AccessToken
        )

        if (-not (Test-Path "Conversations")) {
            New-Item -ItemType Directory -Path "Conversations" | Out-Null
        }

        $headers = @{ 
            'Authorization' = "Bearer $AccessToken" 
            'user-agent'    = "$UserAgent"
        }
        
        $keywords = @("admin", "accesstoken", "refreshtoken", "token", "password", "secret")

        function Invoke-With-Retry {
            param (
                [string]$Url
            )
            
            $success = $false
            $response = $null
            do {
                try {
                    $response = Invoke-RestMethod -Uri $Url -Headers $headers -ErrorAction Stop
                    $success = $true
                } 
                catch {
                    $statusCode = $_.Exception.Response.StatusCode.value__
                    if ($statusCode -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 7 }
                    Write-Host "[!] Rate limit hit ($Url). Sleeping $retryAfter seconds..." -ForegroundColor Yellow
                    Start-Sleep -Seconds ([int]$retryAfter)
                    } 
                    else {
                        Write-Host "[-] Error in request to $Url" -ForegroundColor DarkGray
                        return $null
                    }
                }
                } while (-not $success)
                    return $response
        }

        $convos = Invoke-With-Retry -Url "https://graph.microsoft.com/v1.0/groups/$GroupId/conversations"
        if (-not $convos) { return }
        foreach ($convo in $convos.value) {
            $threads = Invoke-With-Retry -Url "https://graph.microsoft.com/v1.0/groups/$GroupId/conversations/$($convo.id)/threads"
            if (-not $threads) { continue }
            foreach ($thread in $threads.value) {
                $posts = Invoke-With-Retry -Url "https://graph.microsoft.com/v1.0/groups/$GroupId/conversations/$($convo.id)/threads/$($thread.id)/posts"
                if (-not $posts) { continue }
                foreach ($post in $posts.value) {
                    $rawHtml = $post.body.content
                    $rawName = "$GroupId-$($convo.id)-$($thread.id)"
                    $cleanName = ($rawName -replace '[^\w\-]', '') 
                    if ($cleanName.Length -gt 100) {
                        $cleanName = $cleanName.Substring(0, 100)
                    }
                    $fileName = "$cleanName.html"
                    $filePath = Join-Path -Path "Conversations" -ChildPath $fileName

                    Add-Type -AssemblyName System.Web
                    $decoded = [System.Web.HttpUtility]::HtmlDecode($rawHtml)
                    $plainText = ($decoded -replace '<[^>]+>', '') -replace '\s{2,}', ' '

                    foreach ($kw in $keywords) {
                        if ($plainText -match "(?i)\b$kw\b.{0,200}") {
                            $matchLine = $matches[0]
                            Write-Host "[!!!] Suspicious content found in group '$GroupName': $kw" -ForegroundColor Red
                            Write-Host "`t--> $matchLine" -ForegroundColor Gray
                            Add-Content -Path "Public_Groups.txt" -Value "[DEAP] $GroupName ($GroupId) | keyword: $kw"
                            Add-Content -Path "Public_Groups.txt" -Value "`t--> $matchLine"
                            Add-Content -Path "Public_Groups.txt" -Value "`t--> Saved full HTML: Conversations\$fileName"
                            break
                        }
                    }
                }
            }
        }
    }
	
	function Get-GroupsWithDirectoryRoles {
        param ($AccessToken)

        $headers = @{ Authorization = "Bearer $AccessToken" }
        $roles = Invoke-With-Retry -Url "https://graph.microsoft.com/v1.0/directoryRoles" -Headers $headers

        $GroupIdsWithRoles = @{}
        $ProcessedRoleIds = @{}

        foreach ($role in $roles.value) {
            $roleId = $role.id
            if ($ProcessedRoleIds.ContainsKey($roleId)) { continue }

            $memberUrl = "https://graph.microsoft.com/v1.0/directoryRoles/$roleId/members"
            $members = Invoke-With-Retry -Url $memberUrl -Headers $headers
            Start-Sleep -Milliseconds 300

            foreach ($member in $members.value) {
                if ($member.'@odata.type' -eq "#microsoft.graph.group") {
                        $GroupIdsWithRoles[$member.id] = $role.displayName
                }
            }

            $ProcessedRoleIds[$roleId] = $true
        }

        return $GroupIdsWithRoles
    }

    $headers = @{
        "Authorization"    = "Bearer $GraphAccessToken"
        "Content-Type"     = "application/json"
        "ConsistencyLevel" = "eventual"
        "Prefer"           = "odata.maxpagesize=999"
        "user-agent"    = "$UserAgent"
    }
        
    $startTime = Get-Date
    $refreshIntervalMinutes = 7
    $groupApiUrl = "https://graph.microsoft.com/v1.0/groups?$filter=groupTypes/any(c:c eq 'Unified')&$select=id,displayName,visibility&$top=999"

    $totalGroupsScanned = 0

    Write-Host "[!!!]Starting To Enumerate O365 Public Groups on $TenantName" -ForegroundColor DarkCyan

        $GroupIdToRoleMap = @{}
        $success1 = $false
            do {
                try {
                    Write-Host "[!!] Fetching directory role assignments" -ForegroundColor DarkCyan
                    $GroupIdToRoleMap = Get-GroupsWithDirectoryRoles -AccessToken $GraphAccessToken
                    $success1 = $true
                } catch {
                    $statusCode = $_.Exception.Response.StatusCode.value__
                    if ($statusCode -eq 429) {
                        $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                        if (-not $retryAfter) { $retryAfter = 7 }
                        Write-Host "[!] Rate limit hit during role mapping. Sleeping for $retryAfter seconds..." -ForegroundColor DarkYellow
                        Start-Sleep -Seconds ([int]$retryAfter)
                    } elseif ($statusCode -eq 401) {
                        Write-Host "[!] Token expired while retrieving roles, refreshing token..." -ForegroundColor Yellow
                        if ($authMethod -eq "refresh") {
                            $GraphAccessToken = Get-Token-WithRefreshToken -RefreshToken $RefreshToken
                        } elseif ($authMethod -eq "client") {
                            $GraphAccessToken = Get-Token-WithClientSecret -ClientId $ClientId -SecretId $SecretId
                        }
                        if (-not $GraphAccessToken) { return }
                        $headers["Authorization"] = "Bearer $GraphAccessToken"
                    } else {
                        Write-Host "[-] Unhandled error during role mapping. Exiting." -ForegroundColor Red
                        return
                    }
                }
            } while (-not $success1)
	
            do {
                $success = $false
                do {
                    try {
                        $response = Invoke-RestMethod -Uri $groupApiUrl -Headers $headers -Method Get -ErrorAction Stop
                        $success = $true
                    } catch {
                        $statusCode = $_.Exception.Response.StatusCode.value__
                        if ($statusCode -eq 429) {
                            $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                            if (-not $retryAfter) { $retryAfter = 7 }
                            Write-Host "[!] Rate limit hit. Sleeping for $retryAfter seconds..." -ForegroundColor DarkYellow
                            Start-Sleep -Seconds ([int]$retryAfter)
                        } elseif ($statusCode -eq 401) {
                            Write-Host "[!] Access token expired, refreshing..." -ForegroundColor DarkYellow
                            if ($authMethod -eq "refresh") {
                                $GraphAccessToken = Get-Token-WithRefreshToken -RefreshToken $RefreshToken
                            } elseif ($authMethod -eq "client") {
                                $GraphAccessToken = Get-Token-WithClientSecret -ClientId $ClientId -SecretId $SecretId
                            }
                            if (-not $GraphAccessToken) { return }
                                $headers["Authorization"] = "Bearer $GraphAccessToken"
                                $startTime = Get-Date
                        } else {
                            Write-Host "[-] Unexpected error. Exiting." -ForegroundColor Red
                            return
                         }
                    }
                } while (-not $success)

        $groupsBatch = $response.value
        $batchCount = $groupsBatch.Count
        $scannedInBatch = 0


        foreach ($group in $groupsBatch) {
            $groupId = $group.id
            $groupName = $group.displayName
            $visibility = $group.visibility
			
			if ($visibility -eq "Public") {
                if ($GroupIdToRoleMap.ContainsKey($groupId)) {
                    Write-Host "[!!!] $groupName ($groupId) is Public AND has Directory Role: $($GroupIdToRoleMap[$groupId])" -ForegroundColor Yellow
                    "[Privileged] $($groupName.PadRight(30)) : $($groupId.PadRight(40)) : Role = $($GroupIdToRoleMap[$groupId])" | Add-Content -Path "Public_Groups.txt"
                } else {
                    Write-Host "[+] $groupName ($groupId) is Public" -ForegroundColor DarkGreen
                    "$($groupName.PadRight(30)) : $($groupId.PadRight(40))" | Add-Content -Path "Public_Groups.txt"
                }
				if ($Deep) {
					Get-SensitiveConversations -GroupId $groupId -GroupName $groupName -AccessToken $GraphAccessToken
				}
            }

            $scannedInBatch++
            $totalGroupsScanned++
            $percent = [math]::Round(($scannedInBatch / $batchCount) * 100)
            Write-Progress -Activity "Scanning Public Groups..." -Status "$percent% Complete in current batch" -PercentComplete $percent
        }


        if ((New-TimeSpan -Start $startTime).TotalMinutes -ge $refreshIntervalMinutes) {
            Write-Host "[*] Refresh interval reached, refreshing token..." -ForegroundColor DarkYellow
            if ($authMethod -eq "refresh") {
                $GraphAccessToken = Get-Token-WithRefreshToken -RefreshToken $RefreshToken
            } elseif ($authMethod -eq "client") {
                $GraphAccessToken = Get-Token-WithClientSecret -ClientId $ClientId -SecretId $SecretId
            }
            if (-not $GraphAccessToken) { return }
            $headers["Authorization"] = "Bearer $GraphAccessToken"
            $startTime = Get-Date
        }
		
        $groupApiUrl = $response.'@odata.nextLink'

    } while ($groupApiUrl)

    Write-Host "`n[>] Finished scanning. Total Groups Scanned: $totalGroupsScanned" -ForegroundColor DarkCyan
    Write-Host "`n[>] Public group ids save to Public_Groups.txt" -ForegroundColor DarkCyan
}

<#################################################################################################################################################>
function Invoke-FindDynamicGroups {	
    param (
        [string]$RefreshToken, 
        [string]$ClientID, 
        [string]$GraphAccessToken, 
        [string]$TenantID,
        [string]$TenantName,
        [string]$ClientSecret
    )
    
    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
    $headers = @{ 'User-Agent' = $UserAgent }
		
    function Get-Token-WithRefreshToken {
        param( 
            [string]$RefreshToken, 
            [string]$TenantID 
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
	    $body = @{
            "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            "scope"         = "https://graph.microsoft.com/.default"
            "grant_type"    = "refresh_token"
            "refresh_token" = $RefreshToken
		}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
	}

	function Get-Token-WithClientSecret {
        param(
            [string]$ClientID,
            [string]$ClientSecret,
            [string]$TenantID   
        )
		$url = "https://login.microsoftonline.com/$TenantID/oauth2/v2.0/token"
		$body = @{
			"client_id"     = $ClientId
			"client_secret" = $ClientSecret
			"scope"         = "https://graph.microsoft.com/.default"
			"grant_type"    = "client_credentials"
			}
		return (Invoke-RestMethod -Method POST -Uri $url -Body $body -Headers $headers).access_token
		}

	if (-not $GraphAccessToken) { return }

    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null){
        $authMethod = "client"
    }
    
    if( $RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null){
        $authMethod = "refresh"
    }

	if (Test-Path "Dynamic_Groups.txt") {
		$choice = Read-Host "Dynamic_Groups.txt exists. (D)elete / (A)ppend?"
		if ($choice -match "^[dD]$") {
			Remove-Item -Path "Dynamic_Groups.txt" -Force
		} elseif ($choice -notmatch "^[aA]$") {
			return
		}
	}

	$headers = @{
		"Authorization"    = "Bearer $GraphAccessToken"
		"Content-Type"     = "application/json"
		"ConsistencyLevel" = "eventual"
		"Prefer"           = "odata.maxpagesize=999"
        "User-Agent"        = "$UserAgent"
	}

	$startTime = Get-Date
	$refreshIntervalMinutes = 7
	$groupApiUrl = "https://graph.microsoft.com/v1.0/groups?$filter=groupTypes/any(c:c eq 'Unified')&$select=id,displayName,membershipRule&$top=999"

	$totalGroupsScanned = 0

	Write-Host "[!!!]Starting To Enumerate Dynamic Groups on $TenantName" -ForegroundColor DarkYellow
    do {
        $success = $false
        do {
            try {
                $response = Invoke-RestMethod -Uri $groupApiUrl -Headers $headers -Method Get -ErrorAction Stop
                $success = $true
            } catch {
                $statusCode = $_.Exception.Response.StatusCode.value__
                if ($statusCode -eq 429) {
                    $retryAfter = $_.Exception.Response.Headers["Retry-After"]
                    if (-not $retryAfter) { $retryAfter = 7 }
                    Write-Host "[!] Rate limit hit. Sleeping for $retryAfter seconds..." -ForegroundColor DarkYellow
                    Start-Sleep -Seconds ([int]$retryAfter)
                } elseif ($statusCode -eq 401) {
                    Write-Host "[!] Access token expired, refreshing..." -ForegroundColor DarkYellow
                    if ($authMethod -eq "refresh") {
                        $GraphAccessToken = Get-Token-WithRefreshToken -RefreshToken $RefreshToken -TenantID $TenantID
                    } elseif ($authMethod -eq "client") {
                        $GraphAccessToken = Get-Token-WithClientSecret -ClientId $ClientId -SecretId $SecretId -TenantID $TenantID
                    }
                    if (-not $GraphAccessToken) { return }
                    $headers["Authorization"] = "Bearer $GraphAccessToken"
                    $startTime = Get-Date
                } else {
                    Write-Host "[-] Unexpected error. Exiting." -ForegroundColor Red
                    return
                }
            }
        } while (-not $success)

        $groupsBatch = $response.value
        $batchCount = $groupsBatch.Count
        $scannedInBatch = 0

			foreach ($group in $groupsBatch) {
				$groupId = $group.id
				$groupName = $group.displayName
				$membershipRule = $group.membershipRule

				if ($membershipRule -ne $null) {
				
					Write-Host "[+] $groupName ($groupId) is Dynamic" -ForegroundColor DarkGreen

					$conditions = @()
					if ($membershipRule -match '\buser\.mail\b') { $conditions += "mail" }
					if ($membershipRule -match '\buser\.userPrincipalName\b') { $conditions += "userPrincipalName" }
					if ($membershipRule -match '\buser\.displayName\b') { $conditions += "displayName" }

					if ($conditions.Count -gt 0) {						
						  if ($membershipRule -match "@") {
							continue  
						}
						$joined = ($conditions -join " AND ")
						Write-Host "    [!] Contains sensitive rule: $joined" -ForegroundColor Yellow
						Write-Host "      [$groupName] => $membershipRule" -ForegroundColor DarkCyan
						$outputLine = "      [Sensitive Rule] $($groupName.PadRight(30)) : $($groupId.PadRight(40)) : $joined : $membershipRule"
					} else {

					}
					
			        try {
						Add-Content -Path "Dynamic_Groups.txt" -Value $outputLine
					} catch {
						Write-Host "[!] Failed to write to file: $_" -ForegroundColor Red
					}
				}

				$scannedInBatch++
				$totalGroupsScanned++
				$percent = [math]::Round(($scannedInBatch / $batchCount) * 100)
				Write-Progress -Activity "Scanning Dynamic Groups..." -Status "$percent% Complete in current batch" -PercentComplete $percent
			}

        if ((New-TimeSpan -Start $startTime).TotalMinutes -ge $refreshIntervalMinutes) {
            Write-Host "[*] Refresh interval reached, refreshing token..." -ForegroundColor DarkYellow
            if ($authMethod -eq "refresh") {
                $GraphAccessToken = Get-Token-WithRefreshToken -RefreshToken $RefreshToken
            } elseif ($authMethod -eq "client") {
                $GraphAccessToken = Get-Token-WithClientSecret -ClientId $ClientId -ClientSecret $ClientSecret
            }
            if (-not $GraphAccessToken) { return }
            $headers["Authorization"] = "Bearer $GraphAccessToken"
            $startTime = Get-Date
        }

        $groupApiUrl = $response.'@odata.nextLink'

    } while ($groupApiUrl)

    Write-Host "`n[*] Finished scanning. Total Groups Scanned: $totalGroupsScanned" -ForegroundColor DarkCyan
    Write-Host "`n[>] Dynamic group saved to Dynamic_groups.txt" -ForegroundColor DarkCyan
}



<#################################################################################################################################################>
<#################################################################################################################################################>
<#################################################################################################################################################>
function Banner {

        Write-Host "##############################################################################################" -ForegroundColor Cyan
        Write-Host "#                                                                                                           #" -ForegroundColor Cyan
        Write-Host "#     _    ____ _____     _____       _                    ____      _ _           _   _                    #" -ForegroundColor Cyan
        Write-Host "#    / \  |  _ \_   _|   | ____|_ __ | |_ _ __ __ _       / ___|___ | | | ___  ___| |_(_) ___   __ __       #" -ForegroundColor Cyan
        Write-Host "#   / _ \ | |_) || |_____|  _| | '_ \| __| '__/ _` |_____ | |   / _ \| | |/ _ \/ __| __| |/ _ \ |  '_  \     #" -ForegroundColor Cyan
        Write-Host "#  / ___ \|  _ < | |_____| |___| | | | |_| | | (_| |_____| |__| (_) | | |  __/ (__| |_| | (_) ||  | |  |    #" -ForegroundColor Cyan
        Write-Host "# /_/   \_\_| \_\|_|     |_____|_| |_|\__|_|  \__,_|      \____\___/|_|_|\___|\___|\__|_|\___/ |__| |__|    #" -ForegroundColor Cyan
        Write-Host "#                                                                                                           #" -ForegroundColor Cyan
        Write-Host "#                         Entra ID Interactive Framework  |  Author: Shaked Weissman                        #" -ForegroundColor Yellow
        Write-Host "#                                                                                                           #" -ForegroundColor Cyan
        Write-Host "##############################################################################################" -ForegroundColor Cyan

}

        function Get-TenantInputMethod {
            Banner
            while ($true) {
                Write-Host "`n[*] Choose tenant input method:" -ForegroundColor DarkCyan
                Write-Host "1) Tenant Name" -ForegroundColor DarkYellow
                Write-Host "2) Tenant ID" -ForegroundColor DarkYellow
                $choice = Read-Host "Enter choice (1/2)"
                if ($choice -eq "1" -or $choice -eq "2") {
                    return $choice
                } else {
                    Write-Host "[!] Invalid choice. Please enter 1 or 2." -ForegroundColor DarkRed
                }
            }
        }

        function Get-TenantIdentity {
            param ($Method)
            if ($Method -eq "1") {
                while ($true) {
                    $TenantName = Read-Host "[*] Enter your Tenant Name"
                    if (![string]::IsNullOrWhiteSpace($TenantName)) {
                        try {
                            $resp = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$TenantName/.well-known/openid-configuration" -ErrorAction Stop
                            $Global:TenantName = $TenantName
                            return @{ TenantID = ($resp.issuer -split '/')[3]; Input = $TenantName; Source = "Domain" }
                        } catch {
                            Write-Host "[!] Invalid Tenant Domain." -ForegroundColor DarkRed
                        }
                    }
                }
            }
            if ($Method -eq "2") {
                while ($true) {
                    $TenantID = Read-Host "[*] Enter your Tenant ID" -ForegroundColor Cyan
                    if (![string]::IsNullOrWhiteSpace($TenantID) -and $TenantID -match '^[0-9a-fA-F\-]{36}$') {
                        try {
                            $resp = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$TenantID/.well-known/openid-configuration" -ErrorAction Stop
                            return @{ TenantID = $TenantID; Input = $TenantID; Source = "ID" }
                        } catch {
                            Write-Host "[!] Invalid Tenant ID." -ForegroundColor DarkRed
                        }
                    } else {
                        Write-Host "[!] Please enter a valid GUID format." -ForegroundColor DarkRed
                    }
                }
            }
        }


        function Choose-IdentityType {
            while ($true) {
                Write-Host "`n[*] Choose Identity Type:" -ForegroundColor DarkCyan
                Write-Host "1) User Account" -ForegroundColor DarkYellow
                Write-Host "2) Service Principal" -ForegroundColor DarkYellow
                $choice = Read-Host "Enter choice (1/2)"
                if ($choice -eq "1" -or $choice -eq "2") {
                    return $choice
                } else {
                    Write-Host "[!] Invalid choice." -ForegroundColor DarkRed
                }
            }
        }


        function Choose-UserAuthFlow {
            while ($true) {
                Write-Host "`n[*] Choose Authentication Method:" -ForegroundColor DarkCyan
                Write-Host "1) Refresh Token" -ForegroundColor DarkYellow
                Write-Host "2) Device Code Flow" -ForegroundColor DarkYellow
                $choice = Read-Host "Enter choice (1/2)"
                if ($choice -eq "1" -or $choice -eq "2") {
                    return $choice
                } else {
                    Write-Host "[!] Invalid choice." -ForegroundColor DarkRed
                }
            }
        }

        function Decode-AccessToken {
            param ([string]$AccessToken)

            $parts = $AccessToken -split '\.'
            if ($parts.Length -ge 2) {
                $payload = $parts[1].Replace('-', '+').Replace('_', '/')
                switch ($payload.Length % 4) {
                    2 { $payload += '==' }
                    3 { $payload += '=' }
                }
                try {
                    $bytes = [System.Convert]::FromBase64String($payload)
                    $json = [System.Text.Encoding]::UTF8.GetString($bytes)
                    return $json | ConvertFrom-Json
                } catch {
                    Write-Host "[!] Failed to decode Access Token" -ForegroundColor DarkRed
                    return $null
                }
            } else {
                Write-Host "[!] Invalid Access Token format." -ForegroundColor DarkRed
                return $null
            }
        }

        $sensitiveScopes = @(
            "Directory.ReadWrite.All",
            "Directory.AccessAsUser.All",
            "RoleManagement.ReadWrite.Directory",
            "User.ReadWrite.All",
            "Application.ReadWrite.All",
            "Group.ReadWrite.All",
            "PrivilegedAccess.ReadWrite.AzureAD",
            "Policy.ReadWrite.ConditionalAccess"
        )
        $Global:Identities = @()



        function Initialize-Session {
            $TenantMethod = Get-TenantInputMethod
            $TenantInfo = Get-TenantIdentity -Method $TenantMethod
            $Global:TenantID = $TenantInfo.TenantID
            $identityType = Choose-IdentityType

            if ($identityType -eq "1")#RefreshToken  
                {
                $authMethod = Choose-UserAuthFlow

                if ($authMethod -eq "1") {
                    Write-Host "Enter your Refresh Token" 
                    $RefreshToken = Read-Host "[>]"
                    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
		            $headers = @{ 'User-Agent' = $UserAgent }
                    $url = "https://login.microsoftonline.com/$Global:TenantID/oauth2/v2.0/token?api-version=1.0"
                    $refreshBodyGraph = @{
                        "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
                        "scope"         = "https://graph.microsoft.com/.default"
                        "grant_type"    = "refresh_token"
                        "refresh_token" = $RefreshToken
                    }
                    $refreshBodyARM = @{
                        "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
                        "scope"         = "https://management.azure.com/.default"
                        "grant_type"    = "refresh_token"
                        "refresh_token" = $RefreshToken
                    }
                    
                    try {
                        try {
                            $refreshResponseGraph = Invoke-RestMethod -Method POST -Uri $url -Body $refreshBodyGraph -Headers $headers -ContentType "application/x-www-form-urlencoded"
                            $GraphToken = $refreshResponseGraph.access_token
                            $RefreshToken = $refreshResponseGraph.refresh_token
                            $DecodedGraph = Decode-AccessToken -AccessToken $GraphToken
                            Write-Host "[+] Successfully received Graph Access Token" -ForegroundColor Green
                        } catch {
                            Write-Host "[-] Failed to get Graph Access Token" -ForegroundColor DarkRed
                            }
                            try {
                                $refreshResponseARM = Invoke-RestMethod -Method POST -Uri $url -Body $refreshBodyARM -Headers $headers -ContentType "application/x-www-form-urlencoded"
                                $ARMToken = $refreshResponseARM.access_token
                                $DecodedARM = Decode-AccessToken -AccessToken $ARMToken
                                Write-Host "[+] Successfully received ARM Access Token" -ForegroundColor Green
                            } catch {
                                Write-Host "[-] Failed to get ARM Access Token" -ForegroundColor DarkRed
                                }
                            if ($GraphToken -or $ARMToken) {
                                if ($DecodedGraph) {
                                    Write-Host "`n[+] Identity Info Extracted from Access Token (Graph):" -ForegroundColor Cyan
                                    if ($DecodedGraph.upn) {
                                        Write-Host "  UPN:        $($DecodedGraph.upn)" -ForegroundColor Green
                                    }
                                    if ($DecodedGraph.scp) {
                                        Write-Host "  Scopes:        $($DecodedGraph.scp)" -ForegroundColor Green
                                    }
                                    if ($DecodedGraph.roles) {
                                        Write-Host "  Roles:      $($DecodedGraph.roles -join ', ')" -ForegroundColor Yellow
                                    }
                                    Write-Host ""
                                    $CurrentUPN = $DecodedGraph.upn
                                    $Scopes = $DecodedGraph.scp -split " " 
                                    $Global:Identities += [PSCustomObject]@{
                                        UPN             = $CurrentUPN 
                                        GraphToken      = $GraphToken
                                        ARMToken        = $ARMToken
                                        Scopes          = $Scopes
                                        RefreshToken    = $RefreshToken 
                                    }                      
                                }  

                                if ($DecodedARM) {
                                    Write-Host "`n[+] Identity Info Extracted from Access Token (Graph):" -ForegroundColor Cyan

                                    if ($DecodedARM.upn) {
                                        Write-Host "  UPN:        $($DecodedARM.upn)" -ForegroundColor Green
                                    } 
                                    if ($DecodedARM.scp) {
                                        Write-Host "  Scopes:     $($DecodedARM.scp)" -ForegroundColor Yellow
                                    }
                                    if ($DecodedARM.roles) {
                                        Write-Host "  Roles:      $($DecodedARM.roles -join ', ')" -ForegroundColor Yellow
                                    }
                                    Write-Host ""
                                }
                            return $true
                            }   
                    }  catch {
                            Write-Host "`n[-] Failed to retrieve Access Token using Refresh Token." -ForegroundColor DarkRed
                        return $null
                    }
                    
                
                } elseif ($authMethod -eq "2") {
                    $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
		            $headers = @{ 'User-Agent' = $UserAgent }
                    $deviceCodeUrl = "https://login.microsoftonline.com/common/oauth2/devicecode?api-version=1.0"
       		        $Body = @{
            		    "client_id" = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
            		    "resource"     = "https://graph.microsoft.com"
                    }
                    $authResponse = Invoke-RestMethod -Method POST -Uri $deviceCodeUrl -Headers $headers -Body $Body
                    $deviceCode = $authResponse.device_code
                    $code = $authResponse.user_code
                    Write-Host "`n[#] Browser will open in 5 sec, Please enter this code:" -ForegroundColor DarkYellow -NoNewline
                    Write-Host " $code" -ForegroundColor DarkGray
                    Start-Sleep -Seconds 5
                    Start-Process "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe" -ArgumentList "https://microsoft.com/devicelogin"

                    $tokenUrl = "https://login.microsoftonline.com/common/oauth2/token?api-version=1.0"
                    $tokenBody = @{
                        "scope"      = "openid"
                        "client_id"  = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
                        "grant_type" = "urn:ietf:params:oauth:grant-type:device_code"
                        "code"       = $deviceCode
                    }
                    while ($true) {
                        try {
                            $tokenResponse = Invoke-RestMethod -Method POST -Uri $tokenUrl -Headers $headers -Body $tokenBody -ErrorAction Stop -ContentType "application/x-www-form-urlencoded"
                            $RefreshToken = $tokenResponse.refresh_token
                            Set-Content -Path "C:\Users\Public\Refreshtoken.txt" -Value $RefreshToken
                            Write-Host "[>] Refresh Token saved to C:\Users\Public\Refreshtoken.txt" -ForegroundColor DarkGray

                            $url = "https://login.microsoftonline.com/$Global:TenantID/oauth2/v2.0/token?api-version=1.0"
                            $refreshBodyGraph = @{
                                "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
                                "scope"         = "https://graph.microsoft.com/.default"
                                "grant_type"    = "refresh_token"
                                "refresh_token" = $RefreshToken
                            }
                            $refreshBodyARM = @{
                                "client_id"     = "d3590ed6-52b3-4102-aeff-aad2292ab01c"
                                "scope"         = "https://management.azure.com/.default"
                                "grant_type"    = "refresh_token"
                                "refresh_token" = $RefreshToken
                            }
                            try {
                                try {
                                    $refreshResponseGraph = Invoke-RestMethod -Method POST -Uri $url -Body $refreshBodyGraph -Headers $headers -ContentType "application/x-www-form-urlencoded"
                                    $GraphToken = $refreshResponseGraph.access_token
                                    $RefreshToken = $refreshResponseGraph.refresh_token
                                    $DecodedGraph = Decode-AccessToken -AccessToken $GraphToken
                                    Write-Host "[+] Successfully received Graph Access Token" -ForegroundColor Green
                                } catch {
                                    Write-Host "[-] Failed to get Graph Access Token" -ForegroundColor DarkRed
                                }

                                try {
                                    $refreshResponseARM = Invoke-RestMethod -Method POST -Uri $url -Body $refreshBodyARM -Headers $headers -ContentType "application/x-www-form-urlencoded"
                                    $ARMToken = $refreshResponseARM.access_token
                                    $DecodedARM = Decode-AccessToken -AccessToken $ARMToken
                                    Write-Host "[+] Successfully received ARM Access Token" -ForegroundColor Green
                                } catch {
                                    Write-Host "[-] Failed to get ARM Access Token" -ForegroundColor DarkRed
                                }
                            if ($GraphToken -or $ARMToken) {
                            if ($DecodedGraph) {
                                Write-Host "`n[+] Identity Info Extracted from Access Token (Graph):" -ForegroundColor Cyan

                                if ($DecodedGraph.upn) {
                                    Write-Host "  UPN:        $($DecodedGraph.upn)" -ForegroundColor Green
                                } 
                                if ($DecodedGraph.scp) {
                                    Write-Host "  Scopes:        $($DecodedGraph.scp)" -ForegroundColor Green
                                }
                                if ($DecodedGraph.roles) {
                                    Write-Host "  oles:      $($DecodedGraph.roles -join ', ')" -ForegroundColor Yellow
                                }
                                Write-Host ""
                                
                                $CurrentUPN = $DecodedGraph.upn
                                $Scopes = $DecodedGraph.scp -split " " 
                                $Global:Identities += [PSCustomObject]@{
                                    UPN             = $CurrentUPN 
                                    GraphToken      = $GraphToken
                                    ARMToken        = $ARMToken
                                    Scopes          = $Scopes 
                                    RefreshToken    = $RefreshToken
                                    type            = "User"
                                }                      

                            }
                            if ($DecodedARM) {
                                Write-Host "`n[+] Identity Info Extracted from Access Token (ARM):" -ForegroundColor Cyan

                                if ($DecodedARM.upn) {
                                    Write-Host "  UPN:        $($DecodedARM.upn)" -ForegroundColor Green
                                }  
                                if ($DecodedARM.scp) {
                                    Write-Host "  Scopes:     $($DecodedARM.scp)" -ForegroundColor Yellow
                                }
                                if ($DecodedARM.roles) {
                                    Write-Host "  Roles:      $($DecodedARM.roles -join ', ')" -ForegroundColor Yellow
                                }
                                Write-Host ""
                            }

                            return $true
                            }
                            }
                            catch {
                                Write-Host "`n[-] Failed to retrieve Access Token using Refresh Token." -ForegroundColor DarkRed
			                    return $null
                            }
                        } catch {
                            $errorResponse = $_.ErrorDetails.Message | ConvertFrom-Json
                            if ($errorResponse.error -eq "authorization_pending") {
                                Start-Sleep -Seconds 5
                            } elseif ($errorResponse.error -eq "authorization_declined" -or $errorResponse.error -eq "expired_token") {
                                Write-Host "`n[-] Authorization failed or expired." -ForegroundColor DarkRed
                                return
                            } else {
                                Write-Host "`n[-] Unexpected error: $($errorResponse.error)" -ForegroundColor DarkRed
                                return
                            }
                        }
                    } 
                }
            }
            elseif ($identityType -eq "2") {
                Write-Host "Enter your Client ID" -ForegroundColor Cyan
                $ClientID = Read-Host "[>]"
                Write-Host "Enter your Client Secret" -ForegroundColor Cyan
                $ClientSecret = Read-Host "[>]"

                $Url = "https://login.microsoftonline.com/$Global:TenantID/oauth2/v2.0/token"
                $UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
                $headers = @{ 'User-Agent' = $UserAgent }
                $bodyGraph = @{
                    "grant_type" = "client_credentials"
                    "scope" = "https://graph.microsoft.com/.default"
                    "client_id" = "$ClientID"
                    "client_secret" = "$ClientSecret"
                }
                $bodyARM = @{
                    "grant_type" = "client_credentials"
                    "scope" = "https://management.azure.com/.default"
                    "client_id" = "$ClientID"
                    "client_secret" = "$ClientSecret"
                }
                try {
                    try {
                        $refreshResponseGraph = Invoke-RestMethod -Method POST -Uri $url -Body $bodyGraph -Headers $headers -ContentType "application/x-www-form-urlencoded"
                        $GraphToken = $refreshResponseGraph.access_token
                        $RefreshToken = $refreshResponseGraph.refresh_token
                        $DecodedGraph = Decode-AccessToken -AccessToken $GraphToken
                        Write-Host "[+] Successfully received Graph Access Token" -ForegroundColor Green
                    } catch {
                        Write-Host "[-] Failed to get Graph Access Token" -ForegroundColor DarkRed
                    }
                    try {
                        $refreshResponseARM = Invoke-RestMethod -Method POST -Uri $url -Body $bodyARM -Headers $headers -ContentType "application/x-www-form-urlencoded"
                        $ARMToken = $refreshResponseARM.access_token
                        $DecodedARM = Decode-AccessToken -AccessToken $ARMToken
                        Write-Host "[+] Successfully received ARM Access Token" -ForegroundColor Green
                    } catch {
                        Write-Host "[-] Failed to get ARM Access Token" -ForegroundColor DarkRed
                    }
                    if ($GraphToken -or $ARMToken) {

                    $DecodedGraph = Decode-AccessToken -AccessToken $GraphToken
                    $DecodedARM = Decode-AccessToken -AccessToken $ARMToken
                    if ($DecodedGraph) {
                        Write-Host "`n[+] Identity Info Extracted from Access Token (Graph):" -ForegroundColor Cyan
                        if ($DecodedGraph.app_displayname) {
                            Write-Host "  App-Name:        $($DecodedGraph.app_displayname)" -ForegroundColor Green
                        } 
                        if ($DecodedGraph.scp) {
                            Write-Host "  Scopes:    " -NoNewline
                            $ScopesList = $DecodedGraph.scp -split " "
                            foreach ($scope in $ScopesList) {
                                if ($sensitiveScopes -contains $scope) {
                                    Write-Host "$scope " -ForegroundColor Red -NoNewline
                                } else {
                                    Write-Host "$scope " -ForegroundColor Yellow -NoNewline
                                }
                            }
                            Write-Host ""
                        }
                        if ($DecodedGraph.roles) {
                            Write-Host "  Roles:      $($DecodedGraph.roles -join ', ')" -ForegroundColor Yellow
                        }
                        Write-Host ""

                        $CurrentName = $DecodedGraph.app_displayname
                        $Scopes = $DecodedGraph.scp -split " " 
                        $Global:Identities += [PSCustomObject]@{
                            UPN             = $CurrentName 
                            GraphToken      = $GraphToken
                            ARMToken        = $ARMToken
                            Scopes          = $Scopes
                            ClientID        = $ClientID
                            ClientSecret    = $ClientSecret
                            type            = "SPN" 
                        }         
                    }

                    if ($DecodedARM) {
                        Write-Host "`n[+] Identity Info Extracted from Access Token (Graph):" -ForegroundColor Cyan

                        if ($DecodedARM.app_displayname) {
                            Write-Host "  App-Name:        $($DecodedARM.app_displayname)" -ForegroundColor Green
                        } 
                        if ($DecodedARM.scp) {
                            Write-Host "  Scopes:     $($DecodedARM.scp)" -ForegroundColor Yellow
                        }
                        if ($DecodedARM.roles) {
                            Write-Host "  Roles:      $($DecodedARM.roles -join ', ')" -ForegroundColor Yellow
                        }
                        Write-Host ""
                    }
                return $true
                    }
                }   
                catch {
                    write-Host "fuck3"
                }
            }
        }   


        function Show-IdentitiesMenu {
            Write-Host "`n====== Authenticated Identities ======" -ForegroundColor Green
            for ($i = 0; $i -lt $Global:Identities.Count; $i++) {
                $user = $Global:Identities[$i]
                Write-Host "$($i+1)) $($user.UPN) - $($user.Scopes.Count) scopes"
            }
            $choice = Read-Host "Choose identity index to work with"
            if ($choice -match '^\d+$' -and $choice -gt 0 -and $choice -le $Global:Identities.Count) {
                $SelectedIdentity = $Global:Identities[$choice - 1]  
                    $Global:GraphAccessToken = $SelectedIdentity.GraphToken
                    $Global:ARMAccessToken   = $SelectedIdentity.ARMToken
                    $Global:RefreshToken = $SelectedIdentity.refreshtoken
                    $Global:clientID = $SelectedIdentity.ClientID
                    $Global:ClientSecret = $SelectedIdentity.ClientSecret
                 
                Write-Host "`n[+] Loaded identity: $($SelectedIdentity.UPN)" -ForegroundColor Green

                Show-MainMenu
            } else {
                Write-Host "[!] Invalid selection" -ForegroundColor Red
                Show-IdentitiesMenu
            }
        }


    function Show-MainMenu {
        while ($true) {
            Write-Host "`n==== Entra Framework Menu ====" -ForegroundColor DarkCyan
            Write-Host "1) Invoke-FindDynamicGroups" -ForegroundColor DarkYellow
            Write-Host "2) Invoke-FindPublicGroups" -ForegroundColor DarkYellow
            Write-Host "3) Invoke-FindServicePrincipal" -ForegroundColor DarkYellow
            Write-Host "4) Invoke-FindUserRole" -ForegroundColor DarkYellow
            Write-Host "5) Invoke-FindUserByWord" -ForegroundColor DarkYellow
            Write-Host "9) RefreshToken" -ForegroundColor DarkYellow
            Write-Host "10) Identity Menu" -ForegroundColor DarkCyan
            $choice = Read-Host "Select Option" 
            $RefreshToken = $Global:RefreshToken
            $ClientID = $Global:clientID
            $ClientSecret = $Global:ClientSecret
            $GraphAccessToken = $Global:GraphAccessToken
            $TenantID = $Global:TenantID
            $TenantName = $Global:TenantName
            switch ($choice) {
                "1" {
                        if ($RefreshToken -eq $null -and $ClientID -ne $null -and $ClientSecret -ne $null) {

                            Invoke-FindDynamicGroups -ClientID $ClientID -ClientSecret $ClientSecret -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName
                        }
                        if ($ClientID -eq $null -and $ClientSecret -eq $null -and $RefreshToken -ne $null)  {

                            Invoke-FindDynamicGroups -RefreshToken $RefreshToken -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName
                        }
                }

                "2" {
                        Write-Host "Do You want Deep search with conversations searching? Y , N" -ForegroundColor DarkCyan
                        $choice = Read-Host "Select Option" 
                        if($choice -eq "y"){
                            if ($RefreshToken -eq $null -and $ClientID -ne $null -and $ClientSecret -ne $null) {
                                Invoke-FindPublicGroups -ClientID $ClientID -ClientSecret $ClientSecret -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName -deep
                            }
                            if ($ClientID -eq $null -and $ClientSecret -eq $null -and $RefreshToken -ne $null)  {
                                Invoke-FindPublicGroups -RefreshToken $RefreshToken -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName -deep
                            }      
                        }
                        elseif ($RefreshToken -eq $null -and $ClientID -ne $null -and $ClientSecret -ne $null) {

                            Invoke-FindPublicGroups -ClientID $ClientID -ClientSecret $ClientSecret -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName
                        }
                        elseif ($ClientID -eq $null -and $ClientSecret -eq $null -and $RefreshToken -ne $null)  {

                            Invoke-FindPublicGroups -RefreshToken $RefreshToken -GraphAccessToken $GraphAccessToken -TenantID $TenantID -TenantName $TenantName
                        }                   
                }
                "3" {
                        if($RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null) {

                            Invoke-FindServicePrincipal -RefreshToken $RefreshToken -GraphAccessToken $GraphAccessToken -TenantName $TenantName -TenantID $TenantID
                        }
                        if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null) {

                            Invoke-FindServicePrincipal -ClientID $ClientID -ClientSecret $ClientSecret -GraphAccessToken $GraphAccessToken -TenantName $TenantName -TenantID $TenantID
                        }
                        
                }
                "4" {
                    if($RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null) {
                    Invoke-FindUserRole -RefreshToken $RefreshToken -GraphAccessToken $GraphAccessToken -TenantName $TenantName -TenantID $TenantID
                    }
                     if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null) {

                    Invoke-FindUserRole -ClientID $ClientID -ClientSecret $ClientSecret -GraphAccessToken $GraphAccessToken -TenantName $TenantName -TenantID $TenantID
                     }
                } 
                "5"{
                    while ($true) {
                        if ($word -eq $null -or $word -eq "") {
                            Write-Host "You must provide a word to search"
                            $word = Read-Host "[>]"
                        } else {
                            break
                        }
                    }
                    if($RefreshToken -ne $null -and $ClientID -eq $null -and $ClientSecret -eq $null) {
                        Invoke-FindUserByWord -RefreshToken $RefreshToken -TenantID $TenantID -TenantName $TenantName -GraphAccessToken $GraphAccessToken -word $word
                        }
                    if($ClientID -ne $null -and $ClientSecret -ne $null -and $RefreshToken -eq $null) {
                        Invoke-FindUserByWord -ClientID $ClientID -ClientSecret $ClientSecret -TenantID $TenantID -TenantName $TenantName -GraphAccessToken $GraphAccessToken -word $word
                        }
                }          
                "9" { Write-Host "$RefreshToken" -ForegroundColor Cyan }
                "10" { Show-IdentitiesMenu }
                "11" { break }
                default { Write-Host "[!] Invalid option." -ForegroundColor Red }
            }
        }
    }

function Start-IdentityLoop {
    while ($true) {
        $success = Initialize-Session

        if ($success) {
            $last = $Global:Identities[-1]
            if ($last.UPN) {
                Write-Host "`n[+] Identity for $($last.UPN) added." -ForegroundColor Cyan
            } elseif ($last.AppName) {
                Write-Host "`n[+] Identity for $($last.AppName) added." -ForegroundColor Cyan
            }

            do {
                $continue = Read-Host "Do you want to add another identity? (y/n)"
            } while ($continue -notin @("y", "n"))

            if ($continue -eq "n") {
                break  
            }
        } else {
            Write-Host "[!] Failed to initialize identity. Try again." -ForegroundColor Red
        }
    }

    Show-IdentitiesMenu  
}



Start-IdentityLoop

}


